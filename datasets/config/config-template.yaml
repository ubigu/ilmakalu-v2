routing:
  graphhopper:
    port: <port>
    base_url: "http://localhost:{}/route?point={},{}&point={},{}&vehicle=car&locale=fi&calc_points=false"
isochrones:
  graphhopper:
    port: <port>
    base_url: "http://localhost:{}/isochrone?point={},{}&reverse_flow=true&vehicle=car&distance_limit={}"

database:
  local_dev:
    host: <host>
    port: <port>
    user: <user>
    pass: <password>
    database: <database>

chosen_database: <one can write several database connections to the above section, so state the one you want to use in scripts here> 

wfs:
  url: <WFS Service URL>
  version: <WFS version>
  layer: <namespace that defines layer (workspace:layer)>
  floor_area_attribute: <attribute that represents building floor area>
  fuel_attribute: <attribute that represents fuel used by a building>
  building_code_attribute: <attribute that represents a purpose of a building as a code. These values need to correspond with Statistics Finland categorization.>
  year_attribute: <attribute that represents a year when a building was constructed>

co2data.fi:
  url: "https://co2data.fi/api/co2data_construction.json"

traficom:
  municipality_code:  <Write the code as a string with a length of 3. Add leading zeros if necessary.>
  region_code: <Write the code as a string with a length of 2. Add leading zeros if necessary.> 
  usage_mode_statistics:
    passenger_cars_table_url: "https://trafi2.stat.fi:443/PXWeb/api/v1/fi/TraFi/Liikennekaytossa_olevat_ajoneuvot/010_kanta_tau_101.px"
    passenger_cars_year_of_first_registration: "YH" # "YH" meaning "yhteensä." Don't change the value without specific reason. 
    passenger_cars_make: "YH" # "YH" meaning "yhteensä." Don't change the value without specific reason. 
    heavy_cars_table_url: "https://trafi2.stat.fi:443/PXWeb/api/v1/fi/TraFi/Liikennekaytossa_olevat_ajoneuvot/040_kanta_tau_104.px"
    heavy_car_types: # Check init_datasets.md for coding schema
      - "02" # Vans
      - "03" # Trucks
      - "04" # Busses
    heavy_car_year: "2021" # Write as a string. 

target:
  municipality: <three digit national code as string>
  num_nearest_centers: <number of nearest centers to search for minimum distance>