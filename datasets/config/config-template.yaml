routing:
  graphhopper:
    port: <port>
    base_url: "http://localhost:{}/route?point={},{}&point={},{}&vehicle=car&locale=fi&calc_points=false"
isochrones:
  graphhopper:
    port: <port>
    base_url: "http://localhost:{}/isochrone?point={},{}&reverse_flow=true&vehicle=car&distance_limit={}"

database:
  local_dev:
    host: <host>
    port: <port>
    user: <user>
    pass: <password>
    database: <database>

chosen_database: <one can write several database connections to the above section, so state the one you want to use in scripts here> 

wfs:
  url: <WFS Service URL>
  version: <WFS version>
  layer: <namespace that defines layer (workspace:layer)>
  floor_area_attribute: <attribute that represents building floor area>
  fuel_attribute: <attribute that represents fuel used by a building>
  building_code_attribute: <attribute that represents a purpose of a building as a code. These values need to correspond with Statistics Finland categorization.>
  year_attribute: <attribute that represents a year when a building was constructed>

co2data.fi:
  url: "https://co2data.fi/api/co2data_construction.json" # If the url no longer matches, you can change it here.

target:
  municipality: <three digit national code as string>
  num_nearest_centers: <number of nearest centers to search for minimum distance>